<script src="/third_party/chartjs/chart.js"></script>

<div class="box p-5">
    <div class="heading">Quick Actions</div>
    <span class="buttons">
        <a class="button is-rounded is-light" href="/u/profile/{{data.currentUser.id}}">
            <span class="icon is-small">
                <i class="fas fa-user"></i>
            </span>
            <span>View your profile</span>
        </a>
        <a class="button is-rounded is-success is-light" href='/listing/create'>
            <span class="icon is-small">
                <i class="fas fa-plus"></i>
            </span>
            <span>New listing</span>
        </a>
        <a onclick="$('#reportGenModal').fadeIn('fast')" class="button is-rounded is-info is-light">
            <span class="icon is-small">
                <i class="fas fa-file-alt"></i>
            </span>
            <span>Generate report</span>
        </a>
    </span>
</div>

<div class="block">
    <hr>
    <div class="columns">
        <div class="column">
            <small class="has-text-grey-light" title="Generate a report instead to view data past 30 days ago."><i
                    class="fas fa-info-circle"></i>&ensp;Analytics displayed for past 30 days.</small>
        </div>
        <div class="column has-text-right">
            <small style="display: none;" id="updatedIndicator" class="has-text-grey-light">Fetched at <span id="lastUpdateTime"></span></small>
            <small id="updatingIndicator" class="has-text-grey-light"><i class="fas fa-circle-notch fa-spin"></i>&ensp;Loading data...</small>
        </div>
    </div>
</div>

<div class="columns is-multiline" id="dashboardDisplay" style="display: none">
    <div class="column">
        <div class="box">
            <div class="heading">Earnings</div>
            <div class="title">$<span id="currentEarningsField"></span>
                <span id="currentPeriodDiffFieldTag" class="tag is-light"><span
                        id="currentPeriodDiffField"></span></span>
            </div>
            <div class="level">
                <div class="level-item">
                    <div>
                        <div class="heading">Average per tour</div>
                        <div class="title is-5">$<span id="currentAvgField"></span></div>
                    </div>
                </div>
                <div class="level-item">
                    <div>
                        <div class="heading">Average per month</div>
                        <div class="title is-5">$<span id="currentAvgMonthField"></span></div>
                    </div>
                </div>
            </div>
            <canvas id="incomeChart" width="400" height="200"></canvas>
        </div>
    </div>
    <div class="column">
        <div class="box">
            {{!-- TODO: Satisfaction charts. --}}
            <div class="heading">Satisfaction</div>
            <div class="title"><span id="csatField"></span>%
                <span id="csatDiffFieldTag" class="tag is-light"><span id="csatDiffField"></span></span>
            </div>
            <div class="level">
                <div class="level-item">
                    <div>
                        <div class="heading">Reviews received</div>
                        <div class="title is-5"><span id="csatReviewsField"></span></div>
                    </div>
                </div>
                <div class="level-item">
                    <div>
                        <div class="heading">Overall Satisfaction</div>
                        <div class="title is-5"><span id="csatOverallField"></span>%</div>
                    </div>
                </div>
            </div>
            <canvas id="csatChart" width="400" height="200"></canvas>
        </div>
    </div>
</div>

<div id="reportGenModal" class="modal is-active" style="display: none;" onsubmit="$('#reportGenModal').fadeOut('fast')">
    <div class="modal-background" onclick="$('#reportGenModal').fadeOut('fast')"></div>
    <div class="modal-content">
        <div class="box p-6">
            <h1 class="title">Generate report</h1>
            <p class="subtitle">Please select date range for report.</p>

            <form method="GET" action="/api/tourguide/generate_report" target="_blank">
                <div class="columns">
                    <div class="column">
                        <div class="field">
                            <label class="label">From</label>
                            <div class="control">
                                <input name="from" class="input" type="date" placeholder="From" required>
                            </div>
                        </div>
                    </div>
                    <div class="column">
                        <div class="field">
                            <label class="label">To</label>
                            <div class="control">
                                <input name="to" class="input" type="date" placeholder="To" required>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="field">
                    <label class="label">Format</label>
                    <div class="control">
                        <div class="select">
                            <select name="format">
                                <option value="web">Web</option>
                                <option value="pdf">PDF</option>
                                <option value="csv">Spreadsheet</option>
                            </select>
                        </div>
                    </div>
                    <p class="help is-grey">Select 'Web' if you would like to view without downloading.</p>
                </div>
                <div class="field">
                    <button class="button is-light" type="submit"><i
                            class="fas fa-arrow-right"></i>&ensp;Generate</button>
                </div>
            </form>

        </div>
    </div>
    <button onclick="$('#reportGenModal').fadeOut('fast')" class="modal-close is-large" aria-label="close"></button>
</div>


<div class="columns is-multiline" id="skeletonDisplay">
    <div class="column">
        <div class="box">
            <div class="skeleton-text small"></div>
            <div class="skeleton-text value"></span>
            </div>
            <div class="level">
                <div class="level-item">
                    <div>
                        <div class="skeleton-text small"></div>
                        <div class="skeleton-text value small"></div>
                    </div>
                </div>
                <div class="level-item">
                    <div>
                        <div class="skeleton-text small"></div>
                        <div class="skeleton-text value small"></div>
                    </div>
                </div>
            </div>
            <div class="skeleton-chart"></div>
        </div>
    </div>
    <div class="column">
        <div class="box">
            <div class="skeleton-text small"></div>
            <div class="skeleton-text value"></span>
            </div>
            <div class="level">
                <div class="level-item">
                    <div>
                        <div class="skeleton-text small"></div>
                        <div class="skeleton-text value small"></div>
                    </div>
                </div>
                <div class="level-item">
                    <div>
                        <div class="skeleton-text small"></div>
                        <div class="skeleton-text value small"></div>
                    </div>
                </div>
            </div>
            <div class="skeleton-chart"></div>
        </div>
    </div>
</div>

<script>
    const main = () => {
        $.getJSON('/api/tourguide', function (data) {
            $('#currentEarningsField').text(data.money.currentPeriod.totalEarnings.toFixed(2).toString())
            $('#currentAvgField').text(data.money.currentPeriod.averageEarnings.toFixed(2).toString())

            if (data.money.currentPeriod.totalEarnings === 0) {
                $('#currentAvgMonthField').text(parseInt(0))  // Prevents division by 0
            } else {
                $('#currentAvgMonthField').text(parseFloat(data.money.currentPeriod.totalEarnings / 6).toFixed(2).toString())
            }

            if (data.money.currentPeriod.totalEarnings - data.money.lastPeriod.totalEarnings < 0) {
                $('#currentPeriodDiffField').text(`-$${(-(data.money.currentPeriod.totalEarnings - data.money.lastPeriod.totalEarnings)).toFixed(2).toString()}`);
                $('#currentPeriodDiffFieldTag').addClass('is-danger');
            } else {
                $('#currentPeriodDiffField').text(`+$${(data.money.currentPeriod.totalEarnings - data.money.lastPeriod.totalEarnings).toFixed(2).toString()}`);
                $('#currentPeriodDiffFieldTag').addClass('is-success');
            }

            $('#csatField').text(data.csat.currentPeriod.CSATForPeriod)

            if (data.csat.currentPeriod.CSATForPeriod - data.csat.lastPeriod.CSATForPeriod < 0) {
                $('#csatDiffField').text(`-${-(data.csat.currentPeriod.CSATForPeriod - data.csat.lastPeriod.CSATForPeriod)}%`);
                $('#csatDiffFieldTag').addClass('is-danger');
            } else {
                $('#csatDiffField').text(`+${data.csat.currentPeriod.CSATForPeriod - data.csat.lastPeriod.CSATForPeriod}%`);
                $('#csatDiffFieldTag').addClass('is-success');
            }

            $('#csatReviewsField').text(data.csat.currentPeriod.numberOfReviews)

            $('#csatOverallField').text(data.csat.currentPeriod.CSATOverall)
        })

        const d = new Date()
        const months = ["January", "February", "March", "April", "May", "June", 'July', 'August', 'September', 'October', 'November', 'December']
        const current_month = d.getMonth()
        let recent_months = []

        const incomeChart = document.getElementById('incomeChart').getContext('2d');
        const csatChart = document.getElementById('csatChart').getContext('2d');

        for (i = 0; i < 6; i++) {
            if (current_month - i < 0) {
                recent_months.push(months[12 - i + 1])
            } else {
                recent_months.push(months[current_month - i])
            }
        }

        // Fetch API
        $.getJSON('/api/tourguide/chart', function (data) {

            const moneyData = data.money
            const csatData = data.csat

            var incomeChartData = new Chart(incomeChart, {
                type: 'line',
                data: {
                    labels: (recent_months.reverse()).slice(1),
                    datasets: [{
                        label: 'Earnings',
                        data: [moneyData.m5.totalEarnings, moneyData.m4.totalEarnings, moneyData.m3.totalEarnings, moneyData.m2.totalEarnings, moneyData.m1.totalEarnings, moneyData.m0.totalEarnings],
                        //backgroundColor: 'rgba(0, 145, 189, 0.20)',
                        //borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: false,
                                callback: function (value, index, values) {
                                    // Convert the number to a string and splite the string every 3 charaters from the end
                                    value = value.toString();
                                    value = value.split(/(?=(?:...)*$)/);

                                    // Convert the array to a string and format the output
                                    value = value.join('.');
                                    return '$' + value;
                                }
                            },
                        }]
                    },
                    elements: {
                        line: {
                            cubicInterpolationMode: 'monotone'
                        }
                    },
                    tooltips: {
                        callbacks: {
                            label: function (tooltipItem, data) {
                                return data['labels'][tooltipItem['index']] + ': ' + '$' + data['datasets'][0]['data'][tooltipItem['index']];
                            }
                        }
                    },
                }
            })

            var csatChartData = new Chart(csatChart, {
                type: 'line',
                data: {
                    labels: recent_months.slice(0, -1),
                    datasets: [{
                        label: 'Satisfaction rate (%)',
                        data: [csatData.m5.CSATForPeriod, csatData.m4.CSATForPeriod, csatData.m3.CSATForPeriod, csatData.m2.CSATForPeriod, csatData.m1.CSATForPeriod],
                        backgroundColor: 'rgba(224, 34, 85, 0.2)',
                        //borderWidth: 1
                    }]
                },
                options: {
                    elements: {
                        line: {
                            cubicInterpolationMode: 'monotone'
                        }
                    },
                    tooltips: {
                        callbacks: {
                            label: function (tooltipItem, data) {
                                return data['labels'][tooltipItem['index']] + ': ' + data['datasets'][0]['data'][tooltipItem['index']] + '%';
                            }
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                max: 100,
                                callback: function (value, index, values) {
                                    // Convert the number to a string and splite the string every 3 charaters from the end
                                    value = value.toString();
                                    value = value.split(/(?=(?:...)*$)/);

                                    // Convert the array to a string and format the output
                                    value = value.join('.');
                                    return value + '%';
                                }
                            }
                        }]
                    }
                }
            })
        }).then(() => {
            $('#skeletonDisplay').hide(0, () => {
                $('#lastUpdateTime').text(new Date().toLocaleString())
                $('#dashboardDisplay').show();
                $('#updatingIndicator').fadeOut('fast', ()=> {
                    $('#updatedIndicator').fadeIn('fast')
                })
            })
        })
    }

    // Entry point -- On page load
    $(document).on('turbolinks:load', function () {
        setTimeout(main, 1500)
    })

    // Exit point -- Where turbolinks is destroyed
    $(document).on('turbolinks:before-cache turbolinks:before-render', function () {
        incomeChart.destroy()
        csatChart.destroy()
    });
</script>